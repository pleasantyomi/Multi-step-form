import { assert, isNumber } from "../../util";
import { applyUpdate, walkExpression } from "./_internal";
const BIT_OPS = ["and", "or", "xor"];
/** Performs a bitwise update of a field. The operator supports AND, OR, and XOR.*/
export const $bit = (obj, expr, arrayFilters = [], options = {}) => {
    return walkExpression(expr, arrayFilters, options, ((val, node, queries) => {
        return applyUpdate(obj, node, queries, (o, k) => {
            const op = Object.keys(val);
            assert(op.length === 1 && BIT_OPS.includes(op[0]), `Invalid bit operator '${op[0]}'. Must be one of 'and', 'or', or 'xor'.`);
            const n = o[k];
            const v = val[op[0]];
            if (!isNumber(n) || !isNumber(v))
                return false;
            switch (op[0]) {
                case "and":
                    o[k] = n & v;
                    break;
                case "or":
                    o[k] = n | v;
                    break;
                case "xor":
                    o[k] = n ^ v;
                    break;
            }
            return o[k] !== n;
        });
    }));
};
